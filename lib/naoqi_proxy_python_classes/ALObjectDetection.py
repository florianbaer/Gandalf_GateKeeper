#!/usr/bin/env python
# Class autogenerated from .\alobjectdetectionproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running





class ALObjectDetection(object):
    def __init__(self, session):
        self.session = session
        self.proxy = None

    def force_connect(self):
        self.proxy = self.session.service("ALObjectDetection")

    def analyzeFile(self, strImageFilename):
        """Detect things from image file, using previously set cascade

        :param str strImageFilename: filename containing file
        :returns AL::ALValue: list of found area: [[x,y,w,h],neighbours,[headX,headY],(strCreatedCroppedFilename, empty or None if not applicable),(opencv image pointer (not dev)(empty or NONE))] neighbours give an idea of the confidence, it's an int roughly in [0..60]. strCreatedCroppedFilename: filename created containing objects (see saveDetected).
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.analyzeFile(strImageFilename)

    def getActiveCamera(self):
        """

        :returns int: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getActiveCamera()

    def getCascadeFile(self):
        """Returns the filename of the cascade file used for detection.

        :returns AL::ALValue: Name of the cascade file.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getCascadeFile()

    def getCropMargin(self):
        """Returns the crop margins currently set for saving the detected objects' images.

        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getCropMargin()

    def getCurrentPeriod(self):
        """Gets the current period.

        :returns int: Refresh period (in milliseconds).
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getCurrentPeriod()

    def getCurrentPrecision(self):
        """Gets the current precision.

        :returns float: Precision of the extractor.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getCurrentPrecision()

    def getFrameRate(self):
        """

        :returns int: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getFrameRate()

    def getMinNeighbors(self):
        """Returns the minimum number of neighbors set for the algorithm.

        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getMinNeighbors()

    def getMinSize(self):
        """Returns the minimum object size currently set for detection

        :returns AL::ALValue: Minimum horizontal and vertical size
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getMinSize()

    def getMyPeriod(self, name):
        """Gets the period for a specific subscription.

        :param str name: Name of the module which has subscribed.
        :returns int: Refresh period (in milliseconds).
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getMyPeriod(name)

    def getMyPrecision(self, name):
        """Gets the precision for a specific subscription.

        :param str name: name of the module which has subscribed
        :returns float: precision of the extractor
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getMyPrecision(name)

    def getOutputNames(self):
        """Get the list of values updated in ALMemory.

        :returns std::vector<std::string>: Array of values updated by this extractor in ALMemory
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getOutputNames()

    def getResolution(self):
        """

        :returns int: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getResolution()

    def getSavePath(self):
        """Returns the path currently set for saving the detected objects' images.

        :returns AL::ALValue: Path where to save images.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getSavePath()

    def getScaleFactor(self):
        """Returns used scale factor.

        :returns AL::ALValue: Used scale factor.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getScaleFactor()

    def getSubscribersInfo(self):
        """Gets the parameters given by the module.

        :returns AL::ALValue: Array of names and parameters of all subscribers.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.getSubscribersInfo()

    def isDebugEnabled(self):
        """Returns true if debug is enabled, else returns false

        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.isDebugEnabled()

    def isPaused(self):
        """

        :returns bool: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.isPaused()

    def isProcessing(self):
        """

        :returns bool: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.isProcessing()

    def isSavingEnabled(self):
        """Returns true if saving is enabled, else returns false

        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.isSavingEnabled()

    def pause(self, status):
        """

        :param bool status: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.pause(status)

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.ping()

    def setActiveCamera(self, cameraID):
        """

        :param int cameraID: arg
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.setActiveCamera(cameraID)

    def setCascadeFile(self, strCascadeFilename):
        """set the cascade file to use

        :param str strCascadeFilename: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.setCascadeFile(strCascadeFilename)

    def setCropMargin(self, nCropWidthMargin, nCropHeightMargin):
        """Set the crop margins for saving the detected objects' images.

        :param int nCropWidthMargin: Margin around object (default: 16)
        :param int nCropHeightMargin: (default:40)
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.setCropMargin(nCropWidthMargin, nCropHeightMargin)

    def setDebugEnabled(self, bNewState):
        """Enable some outputting, helping testing and understanding.

        :param bool bNewState: true to enable debug mode.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.setDebugEnabled(bNewState)

    def setFrameRate(self, value):
        """

        :param int value: arg
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.setFrameRate(value)

    def setMinNeighbors(self, nMinNeighbors):
        """Sets the minimum number of underlying detections (acts like a confidence threshold)

        :param int nMinNeighbors: new parameter to use (default: 2)
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.setMinNeighbors(nMinNeighbors)

    def setMinSize(self, nMinSizeX, nMinSizeY):
        """Sets the minimum object size for detection

        :param int nMinSizeX: Horizontal size
        :param int nMinSizeY: Vertical size
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.setMinSize(nMinSizeX, nMinSizeY)

    def setResolution(self, resolution):
        """

        :param int resolution: arg
        :returns bool: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.setResolution(resolution)

    def setSavePath(self, strDestinationPath):
        """Set the path where to save the detected objects' images.

        :param str strDestinationPath: Path where to save images.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.setSavePath(strDestinationPath)

    def setSavingEnabled(self, bNewState):
        """Enable or disable the saving of each detected object's image.

        :param bool bNewState: true to enable saving images.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.setSavingEnabled(bNewState)

    def setScaleFactor(self, rScaleFactor):
        """change some cascade parameter(s) (will be updated on the fly on next frame)

        :param float rScaleFactor: new parameter to use
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.setScaleFactor(rScaleFactor)

    def subscribe(self, name, period, precision):
        """Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.

        :param str name: Name of the module which subscribes.
        :param int period: Refresh period (in milliseconds) if relevant.
        :param float precision: Precision of the extractor if relevant.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.subscribe(name, period, precision)

    def subscribe2(self, name):
        """Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.

        :param str name: Name of the module which subscribes.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.subscribe(name)

    def unsubscribe(self, name):
        """Unsubscribes from the extractor.

        :param str name: Name of the module which had subscribed.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.unsubscribe(name)

    def updatePeriod(self, name, period):
        """Updates the period if relevant.

        :param str name: Name of the module which has subscribed.
        :param int period: Refresh period (in milliseconds).
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.updatePeriod(name, period)

    def updatePrecision(self, name, precision):
        """Updates the precision if relevant.

        :param str name: Name of the module which has subscribed.
        :param float precision: Precision of the extractor.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.updatePrecision(name, precision)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALObjectDetection")
        return self.proxy.version()
