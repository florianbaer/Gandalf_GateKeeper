#!/usr/bin/env python
# Class autogenerated from .\alfilemanagerproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running





class ALFileManager(object):
    def __init__(self, session):
        self.session = session
        self.proxy = None

    def force_connect(self):
        self.proxy = self.session.service("ALFileManager")

    def dataFileExists(self, fileName):
        """Try to find if this file does exist on robot or not.

        :param str fileName: Name of the module associate to the preference.
        :returns bool: True upon success
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFileManager")
        return self.proxy.dataFileExists(fileName)

    def fileExists(self, fileName):
        """Try to find if this file does exist on robot or not.

        :param str fileName: Name of the module associate to the preference.
        :returns bool: True upon success
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFileManager")
        return self.proxy.fileExists(fileName)

    def getFileCompletePath(self, prefs):
        """Returns the complete path of the file if it does exist. Starts by looking in user's shared folder, then in system folder.

        :param str prefs: array reprenting the whole file.
        :returns str: True upon success
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFileManager")
        return self.proxy.getFileCompletePath(prefs)

    def getFileContents(self, prefs):
        """Returns the complete path of the file if it does exist. Starts by looking in user's shared folder, then in system folder.

        :param str prefs: array reprenting the whole file.
        :returns AL::ALValue: True upon success
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFileManager")
        return self.proxy.getFileContents(prefs)

    def getSystemSharedFolderPath(self):
        """Get the current system shared folder path.

        :returns str: System shared folder path string.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFileManager")
        return self.proxy.getSystemSharedFolderPath()

    def getUserSharedFolderPath(self):
        """Get the current user shared folder path.

        :returns str: User shared folder path string.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFileManager")
        return self.proxy.getUserSharedFolderPath()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFileManager")
        return self.proxy.ping()

    def setUserSharedFolderPath(self, fileName):
        """Set a new value of the user shared folder path.

        :param str fileName: Name of the module associate to the preference.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFileManager")
        return self.proxy.setUserSharedFolderPath(fileName)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFileManager")
        return self.proxy.version()
