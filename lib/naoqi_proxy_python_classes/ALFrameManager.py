#!/usr/bin/env python
# Class autogenerated from .\alframemanagerproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running





class ALFrameManager(object):
    def __init__(self, session):
        self.session = session
        self.proxy = None

    def force_connect(self):
        self.proxy = self.session.service("ALFrameManager")

    def behaviors(self):
        """List all behaviors currently handled by the frame manager.

        :returns std::vector<std::string>: a set listing all behavior ids
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.behaviors()

    def cleanBehaviors(self):
        """Stop playing any behavior in FrameManager, and delete all of them.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.cleanBehaviors()

    def completeBehavior(self, id):
        """It will play a behavior and block until the behavior is finished. Note that it can block forever if the behavior output is never called.

        :param str id: The id of the box.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.completeBehavior(id)

    def createTimeline(self, timelineContent):
        """Creates a timeline.

        :param str timelineContent: The timeline content (in XML format).
        :returns str: return a unique identifier for the created box that contains the timeline. You must call deleteBehavior on it at some point. DEPRECATED since 1.14
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.createTimeline(timelineContent)

    def deleteBehavior(self, id):
        """Deletes a behavior (meaning a box). Stop the whole behavior contained in this box first.

        :param str id: The id of the box to delete.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.deleteBehavior(id)

    def exitBehavior(self, id):
        """Exit the reading of a timeline contained in a given box

        :param str id: The id of the box.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.exitBehavior(id)

    def getBehaviorPath(self, id):
        """Returns a playing behavior absolute path.

        :param str id: The id of the behavior.
        :returns str: Returns the absolute path of given behavior.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.getBehaviorPath(id)

    def getMotionLength(self, id):
        """Returns in seconds, the duration of a given movement stored in a box. Returns 0 if the behavior has no motion layers.  DEPRECATED since 1.14

        :param str id: The id of the box.
        :returns float: Returns the time in seconds.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.getMotionLength(id)

    def getTimelineFps(self, id):
        """Gets the FPS of a given timeline. DEPRECATED since 1.14

        :param str id: The id of the timeline.
        :returns int: Returns the timeline's FPS.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.getTimelineFps(id)

    def gotoAndPlay(self, id, frame):
        """Goes to a certain frame and continue playing. DEPRECATED since 1.14

        :param str id: The id of the box containing the box.
        :param str frame: The behavior frame name we want the timeline to go to. If will jump to the starting index of the name given.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.gotoAndPlay(id, frame)

    def gotoAndPlay2(self, id, frame):
        """Goes to a certain frame and continue playing. DEPRECATED since 1.14

        :param str id: The id of the box containing the box.
        :param int frame: The frame we want the timeline to go to.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.gotoAndPlay(id, frame)

    def gotoAndStop(self, id, frame):
        """Goes to a certain frame and pause. DEPRECATED since 1.14

        :param str id: The id of the box containing the box.
        :param str frame: The behavior frame name we want the timeline to go to. If will jump to the starting index of the name given.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.gotoAndStop(id, frame)

    def gotoAndStop2(self, id, frame):
        """Goes to a certain frame and pause. DEPRECATED since 1.14

        :param str id: The id of the box containing the box.
        :param int frame: The frame we want the timeline to go to.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.gotoAndStop(id, frame)

    def isBehaviorRunning(self, id):
        """Tells whether the behavior is running

        :param str id: The id of the behavior to check
        :returns bool: True if the behavior is running, false otherwise
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.isBehaviorRunning(id)

    def newBehavior(self, path, xmlFile):
        """Creates a new behavior, from a box found in an xml file. Note that you have to give the xml file contents, so this method is not very user friendly. You have to open the file, and send the string that matches the file contents if you are working from a file. You probably want to use newBehaviorFromFile instead. DEPRECATED since 1.14

        :param str path: The path to reach the box to instantiate in the project ("" if root).
        :param str xmlFile: The choregraphe project (in plain text for the moment).
        :returns str: return a unique identifier for the created box.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.newBehavior(path, xmlFile)

    def newBehaviorFromChoregraphe(self):
        """Creates a new behavior, from the current Choregraphe behavior 0(uploaded to /tmp/currentChoregrapheBehavior/behavior.xar). DEPRECATED since 1.14

        :returns str: return a unique identifier for the created behavior
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.newBehaviorFromChoregraphe()

    def newBehaviorFromFile(self, xmlFilePath, behName):
        """Creates a new behavior, from a box found in an xml file stored in the robot.

        :param str xmlFilePath: Path to Xml file, ex : "/home/youhou/mybehavior.xar".
        :param str behName: 
        :returns str: return a unique identifier for the created box, that can be used by playBehavior
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.newBehaviorFromFile(xmlFilePath, behName)

    def createBehavior(self, packageDir, behaviorPath, behName):
        """Creates a new behavior, from a box found in an xml file stored in the robot.

        :param str packageDir: Path to package directory, ex : "/path/to/appsName"
        :param str behaviorPath: Relative path to the behavior inside the package ex : "behavior_1/behavior.xar"
        :param str behName: 
        :returns str: return a unique identifier for the created box, that can be used by playBehavior
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.createBehavior(packageDir, behaviorPath, behName)

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.ping()

    def playBehavior(self, id):
        """Starts a behavior

        :param str id: The id of the box.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.playBehavior(id)

    def playTimeline(self, id):
        """Starts playing a timeline contained in a given box. If the box is a flow diagram, it will look for the first onStart input of type Bang, and stimulate it ! DEPRECATED since 1.14

        :param str id: The id of the box.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.playTimeline(id)

    def setTimelineFps(self, id, fps):
        """Sets the FPS of a given timeline. DEPRECATED since 1.14

        :param str id: The id of the timeline.
        :param int fps: The FPS to set.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.setTimelineFps(id, fps)

    def stopTimeline(self, id):
        """Stops playing a timeline contained in a given box, at the current frame. DEPRECATED since 1.14

        :param str id: The id of the box.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.stopTimeline(id)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALFrameManager")
        return self.proxy.version()
