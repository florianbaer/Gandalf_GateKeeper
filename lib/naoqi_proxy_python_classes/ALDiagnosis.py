#!/usr/bin/env python
# Class autogenerated from .\aldiagnosisproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running





class ALDiagnosis(object):
    def __init__(self, session):
        self.session = session
        self.proxy = None

    def force_connect(self):
        self.proxy = self.session.service("ALDiagnosis")

    def getActiveDiagnosis(self):
        """The actual state of the active diagnosis.

        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALDiagnosis")
        return self.proxy.getActiveDiagnosis()

    def getPassiveDiagnosis(self):
        """The actual state of the passive diagnosis.

        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALDiagnosis")
        return self.proxy.getPassiveDiagnosis()

    def isNotificationEnabled(self):
        """Return true if notification is active.

        :returns bool: Return True if notifications is active.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALDiagnosis")
        return self.proxy.isNotificationEnabled()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALDiagnosis")
        return self.proxy.ping()

    def setEnableNotification(self, enable):
        """Enable / Disable diagnosis notification.

        :param bool enable: If True enable diagnosis notification. If False disable diagnosis notification.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALDiagnosis")
        return self.proxy.setEnableNotification(enable)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALDiagnosis")
        return self.proxy.version()
