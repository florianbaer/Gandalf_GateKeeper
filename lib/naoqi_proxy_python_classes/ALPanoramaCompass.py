#!/usr/bin/env python
# Class autogenerated from .\alpanoramacompassproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running





class ALPanoramaCompass(object):
    def __init__(self, session):
        self.session = session
        self.proxy = None

    def force_connect(self):
        self.proxy = self.session.service("ALPanoramaCompass")

    def clearAllPanoramas(self, arg1):
        """

        :param bool arg1: arg
        :returns int: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.clearAllPanoramas(arg1)

    def clearAllPanoramas2(self):
        """Delete all panorama files in the current working directory

        :returns int: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.clearAllPanoramas()

    def clearPanorama(self, pIdentity):
        """Delete all files related to a given panorama in the current working directory

        :param int pIdentity: Panorama identity
        :returns int: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.clearPanorama(pIdentity)

    def getCurrentPanoramaDescriptor(self):
        """

        :returns AL::ALValue: Return an ALValue containing Panorama identity and contained Frames identity.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.getCurrentPanoramaDescriptor()

    def getCurrentPosition(self):
        """Return the current orientation of the robot in the current panorama.

        :returns AL::ALValue: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.getCurrentPosition()

    def getFrame(self, id, arg2):
        """Return the Frame corresponding to the input identity. It have to be in the current Panorama

        :param int id: Identity of the resquested Frame.
        :param str arg2: arg
        :returns AL::ALValue: ALValue containing the Frame image part.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.getFrame(id, arg2)

    def isDataAvailable(self):
        """Returns true if there is some panorama data

        :returns bool: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.isDataAvailable()

    def isInPanorama(self):
        """Check if the robot is in the current Panorama.

        :returns int: Error status.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.isInPanorama()

    def isInPanorama2(self, arg1):
        """Check if the robot is in the current Panorama.

        :param int arg1: arg
        :returns int: Error status.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.isInPanorama(arg1)

    def isRelocalizationRequired(self):
        """Is a relocalization movement required.

        :returns bool: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.isRelocalizationRequired()

    def loadPanorama(self, id):
        """Load the panorama corresponding to the input identity from the hard drive. It has to exist.

        :param int id: Identity of the requested Panorama.
        :returns int: Error status.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.loadPanorama(id)

    def localize(self):
        """Localize the robot using the scan.

        :returns std::vector<float>: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.localize()

    def localize2(self, pMode):
        """Localize the robot using the scan.

        :param bool pMode: Localization mode
        :returns std::vector<float>: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.localize(pMode)

    def localize3(self, pMode):
        """Localize the robot using the scan.

        :param int pMode: Localization mode
        :returns std::vector<float>: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.localize(pMode)

    def localize4(self, pMode, arg2):
        """Localize the robot using the scan.

        :param int pMode: Localization mode
        :param bool arg2: arg
        :returns std::vector<float>: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.localize(pMode, arg2)

    def localizeNoHint(self):
        """Localize the robot using the scan,without hint.

        :returns std::vector<float>: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.localizeNoHint()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.ping()

    def setupPanorama(self):
        """Shoot a panorama at the current position.

        :returns int: 
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.setupPanorama()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPanoramaCompass")
        return self.proxy.version()
