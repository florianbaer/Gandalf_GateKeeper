#!/usr/bin/env python
# Class autogenerated from .\alpythonbridgeproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running





class ALPythonBridge(object):
    def __init__(self, session):
        self.session = session
        self.proxy = None

    def force_connect(self):
        self.proxy = self.session.service("ALPythonBridge")

    def eval(self, stringToEvaluate):
        """eval script

        :param str stringToEvaluate: string to eval
        :returns str: if the evaluation has gone wrong
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPythonBridge")
        return self.proxy.eval(stringToEvaluate)

    def evalFull(self, stringToEvaluate):
        """evaluates script and returns an informative array.

        :param str stringToEvaluate: string to eval
        :returns AL::ALValue: an array containing [return value, exceptions, stdout, stderr]
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPythonBridge")
        return self.proxy.evalFull(stringToEvaluate)

    def evalReturn(self, stringToEvaluate):
        """eval script and return result. evalReturn(2+2) will return 4

        :param str stringToEvaluate: string to eval
        :returns AL::ALValue: the result of the evaluation
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPythonBridge")
        return self.proxy.evalReturn(stringToEvaluate)

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPythonBridge")
        return self.proxy.ping()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPythonBridge")
        return self.proxy.version()
