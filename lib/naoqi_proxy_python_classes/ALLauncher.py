#!/usr/bin/env python
# Class autogenerated from .\allauncherproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running





class ALLauncher(object):
    def __init__(self, session):
        self.session = session
        self.proxy = None

    def force_connect(self):
        self.proxy = self.session.service("ALLauncher")

    def getGlobalModuleList(self):
        """get the list of modules loaded on the robot and connected on the robot

        :returns std::vector<std::string>: array of present modules
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLauncher")
        return self.proxy.getGlobalModuleList()

    def isModulePresent(self, strPartOfModuleName):
        """Tests the existence of an active module in the global system (in same executable or in another executable of the distributed system)

        :param str strPartOfModuleName: a part of the name of the module to test existence
        :returns bool: the returned value is true if this module is present
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLauncher")
        return self.proxy.isModulePresent(strPartOfModuleName)

    def launchExecutable(self, moduleName):
        """runs an executable and connect it to current broker (executable)

        :param str moduleName: the name of the module to launch or the name of the script file to execute
        :returns bool: true if ok
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLauncher")
        return self.proxy.launchExecutable(moduleName)

    def launchLocal(self, moduleName):
        """Loads dynamicaly a module

        :param str moduleName: the name of the module to launch or the name of the python script to evaluate
        :returns std::vector<std::string>: list of modules loaded
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLauncher")
        return self.proxy.launchLocal(moduleName)

    def launchPythonModule(self, moduleName):
        """Import a python module

        :param str moduleName: the name of the module to launch
        :returns bool: true if ok
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLauncher")
        return self.proxy.launchPythonModule(moduleName)

    def launchScript(self, moduleName):
        """runs a script connected the current broker

        :param str moduleName: the name of the script to launch (python)
        :returns bool: true if ok
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLauncher")
        return self.proxy.launchScript(moduleName)

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLauncher")
        return self.proxy.ping()

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALLauncher")
        return self.proxy.version()
