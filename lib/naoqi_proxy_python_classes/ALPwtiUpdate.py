#!/usr/bin/env python
# Class autogenerated from .\alpwtiupdateproxy.h
# by Sammy Pfeiffer's <Sammy.Pfeiffer at student.uts.edu.au> generator
# You need an ALBroker running





class ALPwtiUpdate(object):
    def __init__(self, session):
        self.session = session
        self.proxy = None

    def force_connect(self):
        self.proxy = self.session.service("ALPwtiUpdate")

    def getCurrentPeriod(self):
        """Gets the current period.

        :returns int: Refresh period (in milliseconds).
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.getCurrentPeriod()

    def getCurrentPrecision(self):
        """Gets the current precision.

        :returns float: Precision of the extractor.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.getCurrentPrecision()

    def getMyPeriod(self, name):
        """Gets the period for a specific subscription.

        :param str name: Name of the module which has subscribed.
        :returns int: Refresh period (in milliseconds).
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.getMyPeriod(name)

    def getMyPrecision(self, name):
        """Gets the precision for a specific subscription.

        :param str name: name of the module which has subscribed
        :returns float: precision of the extractor
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.getMyPrecision(name)

    def getOutputNames(self):
        """Get the list of values updated in ALMemory.

        :returns std::vector<std::string>: Array of values updated by this extractor in ALMemory
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.getOutputNames()

    def getSubscribersInfo(self):
        """Gets the parameters given by the module.

        :returns AL::ALValue: Array of names and parameters of all subscribers.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.getSubscribersInfo()

    def ping(self):
        """Just a ping. Always returns true

        :returns bool: returns true
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.ping()

    def setPointsApproached(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsApproached(arg1)

    def setPointsDecayNotVisible(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsDecayNotVisible(arg1)

    def setPointsDecayZone1(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsDecayZone1(arg1)

    def setPointsDecayZone2(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsDecayZone2(arg1)

    def setPointsDecayZone3(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsDecayZone3(arg1)

    def setPointsMadeNoiseLooking(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsMadeNoiseLooking(arg1)

    def setPointsMadeNoiseNotVisible(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsMadeNoiseNotVisible(arg1)

    def setPointsMovedAway(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsMovedAway(arg1)

    def setPointsStartLooking(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsStartLooking(arg1)

    def setPointsStopLooking(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsStopLooking(arg1)

    def setPointsWaving(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsWaving(arg1)

    def setPointsZone1(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsZone1(arg1)

    def setPointsZone2(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsZone2(arg1)

    def setPointsZone3(self, arg1):
        """Points setter

        :param float arg1: arg
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.setPointsZone3(arg1)

    def showPointsValuesForEvents(self):
        """Shows points for differents events
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.showPointsValuesForEvents()

    def subscribe(self, name, period, precision):
        """Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.

        :param str name: Name of the module which subscribes.
        :param int period: Refresh period (in milliseconds) if relevant.
        :param float precision: Precision of the extractor if relevant.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.subscribe(name, period, precision)

    def subscribe2(self, name):
        """Subscribes to the extractor. This causes the extractor to start writing information to memory using the keys described by getOutputNames(). These can be accessed in memory using ALMemory.getData(\"keyName\"). In many cases you can avoid calling subscribe on the extractor by just calling ALMemory.subscribeToEvent() supplying a callback method. This will automatically subscribe to the extractor for you.

        :param str name: Name of the module which subscribes.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.subscribe(name)

    def unsubscribe(self, name):
        """Unsubscribes from the extractor.

        :param str name: Name of the module which had subscribed.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.unsubscribe(name)

    def updatePeriod(self, name, period):
        """Updates the period if relevant.

        :param str name: Name of the module which has subscribed.
        :param int period: Refresh period (in milliseconds).
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.updatePeriod(name, period)

    def updatePrecision(self, name, precision):
        """Updates the precision if relevant.

        :param str name: Name of the module which has subscribed.
        :param float precision: Precision of the extractor.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.updatePrecision(name, precision)

    def version(self):
        """Returns the version of the module.

        :returns str: A string containing the version of the module.
        """
        if not self.proxy:
            self.proxy = self.session.service("ALPwtiUpdate")
        return self.proxy.version()
